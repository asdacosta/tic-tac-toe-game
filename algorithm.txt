Problem
Tic tac toe game for two players and against AI with different levels of difficulty.


Algorithm
Create a module for 'Duo' selection
1. Set an prompt to take name of both players
    - At page load and a click on 'Restart' button.
2. Select players elements with PLAYER1 and PLAYER2
    - Let their content be the values from the alert
3. Select scores elements with SCORE1 and SCORE2
4. Select game buttons with GAMEBUTTONS variable
6. Use for-each to loop over GAMEBUTTONS
    - Add click event to all buttons
        * First click should have a content of 'X'
        * Second click should have a content of 'O'
        * Alternate

Create a CHECKMATCH module
1. Use for-each to loop over GAMEBUTTONS
    - Use if row, column, or diagonal buttons match
        * Style first matched buttons.
        * if it was X that matched
            - Add 1 score to SCORE1 variable
            - Display user1 won in the feedback section
        * If it was O that matched
            - Add 1 score to SCORE2 variable
            - Display user2 won in the feedback section

Create PLAYWITHAI module
1. Create RANDOM fxn
    - Define RANDOMPICK fxn with contents of the CHOOSEPICK fxn
        * In the for-each loop, if CURRENTPICK equals 'O'
            - Freeze all buttons
            - For each empty button, randomly pick one in 1s
            - In 1s unfreeze buttons


Pseudo-code
1. 
    CONST select = get('select');
    CONST restartButton = get('section + button');
    CONST gameButtons = getAll('.real-box button');
    CONST player1 = get('.player1');
    CONST player2 = get('.player2');

    restartButton.ADDEVENTLISTENER('CLICK', () => {
        duo.takeNames();
    })
2. 
    CONST duo = (FXN () {
        FXN takeNames () {

        IF (option.value is 'friend')
            player1.TEXTCONTENT = PROMPT('Enter first player name:')
            player2.TEXTCONTENT = PROMPT('Enter second player name:)
        END-IF
        }
        EDN-FXN

        select.ADDEVENTLISTENER('CHANGE', () => {
            takeNames();
        })

        LET currentPick = 'X';
        gameButtons.FOREACH(button, () => {
            button.ADDEVENTLISTENER('CLICK', () => {
                IF (!button.TEXTCONTENT)
                    button.TEXTCONTENT = currentPick;
                    currentPick = currentPick === 'X' ? 'O' : 'X';
                END-IF
            })
        })

    })()
3.
    CONST checkMatch = (FXN () {
        CONST feedback = get('.feedback')
        CONST firstPlayerScore = get('.score1')
        CONST secPlayerScore = get('.score2')
        LET score1 = 0;
        LET score2 = 0;

        IF (Specify the conditions)
            Under each of IFs
                IF (gameButtons[m] === 'X')
                    score1 += 1;
                    firstPlayerScore.TEXTCONTENT = `${score1}`;
                    IF (player1 === 'User' && player2 === 'AI')
                        feedback.TEXTCONTENT = `You conquered this round`
                    ELSE
                        feedback.TEXTCONTENT = `${player1} conquered this round`
                    END-IF
                ELSE-IF (gameButtons[m] === 'O')
                    score2 += 1;
                    secPlayerScore.TEXTCONTENT = `${score2}`;
                    IF (player1 === 'User' && player2 === 'AI')
                        feedback.TEXTCONTENT = `You lost this round`
                    ELSE
                        feedback.TEXTCONTENT = `${player2} conquered this round`
                    END-IF
                END-IF
        END-IF
    })()


// PLAYWITHAI
1.
    FXN random ()
        ** Contents of choosePick()

        gameButtons.FOREACH((button) => {
            ** Contents

            IF (currentPick === 'O')
                gameButtons.FOREACH((button) => {
                    button.STYLE.POINTEREVENTS = 'none';
                })

                FXN getRandomIndex ()
                    CONST isEmpty= ARRAY.FROM(gameButtons).some(button => button.TEXTCONTENT === '');

                    IF (!isEmpty)
                        RETURN 1;
                    END-IF

                    Let randomIndex;

                    DO {
                        randomIndex = MATH.FLOOR(MATH.RANDOM() * 9);
                    } WHILE (gameButtons[randomIndex].TEXTCONTENT !== '')

                    RETURN randomIndex;
                END-FXN

                CONST emptyIndex = getRandomIndex();

                IF (emptyIndex !== 1)
                    gameButtons[emptyIndex].TEXTCONTENT = 'O';
                END-IF
            END-IF

            ** Event listener
        })
    END-FXN